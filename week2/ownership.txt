Example 1:
```
fn main() {
    let mut s = String::from("hello");
    let ref1 = &s;
    let ref2 = &ref1;
    let ref3 = &ref2;
    s = String::from("goodbye");
    println!("{}", ref3.to_uppercase());
}
```
This code does not compile.
Since s is borrowed to ref1 and used in println func,
it should not be changed in this range.

We can move the assignment of s to the back of println func.



Example 2:
```
fn drip_drop() -> &String {
    let s = String::from("hello world!");
    return &s;
}
```
This code does not compile.
The function only borrow s to the caller, but still holds the ownership.
Therefore, it's not clear when s should be freed.

We can introduce lifetime in the signature of the function:
    fn drip_drop<'a>() -> &'a String


Example 3:
```
fn main() {
    let s1 = String::from("hello");
    let mut v = Vec::new();
    v.push(s1);
    let s2: String = v[0];
    println!("{}", s2);
}
```
This code does not compile.
The assignment of s2, as String does not implement 'Copy' trait, moves the ownership of v[0],
but this can't happen because v still holds the ownership of v[0].

We can borrow v[0] to s2 with:
    let s2: &String = &v[0];